% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/summarise_temp_max.R
\name{summarise_temp_max}
\alias{summarise_temp_max}
\title{Compute maximum temperature indicators from grouped data}
\usage{
summarise_temp_max(.x, value_var, normals_df, id_var)
}
\arguments{
\item{.x}{grouped data, created with \code{dplyr::group_by()}}

\item{value_var}{name of the variable with temperature values.}

\item{normals_df}{normals data, created with \code{summarise_normal()}}

\item{id_var}{id variable to join normals with temperature data}
}
\value{
A tibble.
}
\description{
The function computes several maximum temperature indicators from grouped data.
}
\details{
The following variables are computed.
\itemize{
\item{\code{count} Count of data points}
\item{\code{normal} Climatological normal, from \code{normals_df} argument}
\item{\code{avg} Average}
\item{\code{sd} Standard deviation}
\item{\code{se} Standard error}
\item{\code{max} Maximum value}
\item{\code{min} Minimum value}
\item{\code{p10} 10th percentile from a rolling window of size 5}
\item{\code{p90} 90th percentile from a rolling window of size 5}
\item{\code{heat_waves} Count of heat waves occurences, ie. 5 or more consecutive days with maximum temperature above the normal value plus 5 celsius degrees}
\item{\code{tx90p} Count of warm days, ie. count of days with maximum temperatures above the 90th percentile}
\item{\code{t_25} Count of days with temperatures above or equal to 25 celsius degrees}
\item{\code{t_30} Count of days with temperatures above or equal to 30 celsius degrees}
\item{\code{t_35} Count of days with temperatures above or equal to 35 celsius degrees}
\item{\code{t_40} Count of days with temperatures above or equal to 40 celsius degrees}
}
}
\examples{
# Compute normals
normals <- temp_max_data |>
  dplyr::group_by(code_muni) |>
  summarise_normal(date_var = date, value_var = value, year_start = 1961, year_end = 1990) |>
  dplyr::ungroup()

temp_max_data |>
 # Identify year
 dplyr::mutate(year = lubridate::year(date)) |>
 # Group by municipality code and year
 dplyr::group_by(code_muni, year) |>
 # Compute temperature indicators
 summarise_temp_max(value_var = value, normals_df = normals, id_var = "code_muni") |>
 # Ungroup
 dplyr::ungroup()

}
